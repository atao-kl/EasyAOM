[{"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\index.js":"1","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\App.js":"2","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Signup.js":"3","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Home.js":"4","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\hooks\\auth.js":"5","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\components\\Navbar.js":"6","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Login.js":"7","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Felicitation.js":"8","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Recherche.js":"9","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\NosOffres.js":"10","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\MesFavoris.js":"11"},{"size":239,"mtime":1635154681102,"results":"12","hashOfConfig":"13"},{"size":2539,"mtime":1635156348492,"results":"14","hashOfConfig":"13"},{"size":9665,"mtime":1634897081199,"results":"15","hashOfConfig":"13"},{"size":958,"mtime":1634735330035,"results":"16","hashOfConfig":"13"},{"size":2219,"mtime":1634912642831,"results":"17","hashOfConfig":"13"},{"size":3201,"mtime":1635164099919,"results":"18","hashOfConfig":"13"},{"size":2544,"mtime":1635151015961,"results":"19","hashOfConfig":"13"},{"size":1109,"mtime":1634817063521,"results":"20","hashOfConfig":"13"},{"size":499,"mtime":1634305276602,"results":"21","hashOfConfig":"13"},{"size":15246,"mtime":1634911640653,"results":"22","hashOfConfig":"13"},{"size":347,"mtime":1635155335586,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1s7u7ov",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\index.js",[],["53","54"],"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\App.js",["55"],"import './css/App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport useAuth from './hooks/auth';\nimport Home from './pages/Home';\nimport Felicitation from './pages/Felicitation';\nimport Recherche from './pages/Recherche';\nimport NosOffres from './pages/NosOffres';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport Navbar from './components/Navbar';\nimport MesFavoris from './pages/MesFavoris';\n\n/*import '../node_modules/bootstrap-icons/icons';*/\n\nfunction App() {\n    const { getToken, logout } = useAuth();\n    axios.defaults.headers.common.Authorization = `Bearer ${getToken()}`;\n    axios.interceptors.response.use(response => {\n        return response;\n    }, error => {\n        const { message } = error.toJSON();\n        if(message === 'Request failed with status code 401'){\n            logout();\n        }\n        return Promise.reject(error);\n    });\n    \n    \n    return (\n        <Router>\n             <Navbar />\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n            <Switch>\n                <Route exact path='/'>\n                    <Home />\n                </Route>\n                <Route path='/signup'>\n                    <Signup />\n                </Route>\n                <Route path='/login'>\n                    <Login />\n                </Route>\n                <Route path='/felicitation'>\n                    <Felicitation />\n                </Route>\n                <Route path='/recherche'>\n                    <Recherche />\n                </Route>\n                <PrivateRoute exact path='/mesFavoris'>\n                    <MesFavoris />\n                </PrivateRoute>\n                <Route path='/nosOffres'>\n                    <NosOffres />\n                </Route>\n               \n            </Switch>\n            </div>\n      </div>\n      \n        </Router>\n    );\n}\n\nfunction PrivateRoute({ children, ...rest }) {\n    const { isLoggedIn } = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                isLoggedIn() ? (\n                    children\n                ) :\n                    (\n                        <Redirect\n                            to={{\n                                pathname: '/login',\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n}\n\nexport default App;\n","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Signup.js",["56"],"import { useEffect, useState } from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\nimport useAuth from '../hooks/auth';\nimport axios from 'axios';\n\nconst Signup = () => {\n  \n /*test auth-user */\n    const { signup, isLoggedIn } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n    \n    const [nom, setNom] = useState('');\n    const [prenom, setPrenom] = useState('');\n    const [nom_entreprise, setNomEntreprise] = useState('');\n    const [secteuractiviteId, setsecteuractiviteId] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [emailConfirme, setEmailConfirme] = useState('');\n    const [passwordConfirme, setPasswordConfirme] = useState('');\n  \n    const [codeMaile, setCodeMaile] = useState('');\n    const [newslettre, setNewslettre] = useState('');\n    const [promotions, setPromotions] = useState('');\n    const [jconditions, setJconditions] = useState('');  \n     /*redirection page login */   \n    const [redirectToLogin, toggleRedirect] = useState(false);\n    /*la from inscription */\n    const { from } = location.state || { from: { pathname: '/' } };\n   \n    const [secteuractivites, setSecteuractivites] = useState([]);\n     /* refresh liste secteurActivites */\n    const [refresh] = useState(0);\n    useEffect(() => {\n        fetchSecteuractivites();\n    }, [refresh]);\n\n     /*remplir la liste secteurActivites */\n    const fetchSecteuractivites = async () => {\n        try { \n        const { data } = await axios.get('/api/secteuractivites');\n        setSecteuractivites(data);\n        console.log(data);\n        } catch (err) {\n        // Handle Error Here\n        console.error(err);\n        }\n        };\n\n    /* boutton inscription */\n    const handleSubmit = event => {\n        event.preventDefault();\n        let errors = {};\n        let isValid = true;\n          if (!\"password\") {\n           isValid = false; \n            errors[\"password\"] = \"S'il vous plait entrez votre mot de passe.\"; \n            alert(\"S'il vous plait entrez votre mot de passe.\");\n          }\n          if (!\"passwordConfirme\") {    \n            isValid = false;\n            errors[\"passwordConfirme\"] = \"Veuillez entrer votre mot de passe de confirmation.\";\n          /* alert(\"Veuillez entrer votre mot de passe de confirmation.\");   */\n          } \n          /*if (typeof \"password\" !== \"undefined\" && typeof \"passwordConfirme\" !== \"undefined\") { */\n            if (\"password\" != \"passwordConfirme\") { \n              isValid = false; \n              errors[\"password\"] = \"Les mots de passe ne correspondent pas.\"; \n             /* alert(\"Les mots de passe ne correspondent pas.\");*/\n            } \n        /* }    */\n           /* faire appel a la fonction d'inscription */ \n\n            signup(email, password, nom, prenom, nom_entreprise,newslettre, promotions, jconditions ,\n                secteuractiviteId).then(res => {\n                history.replace(from);\n            });         \n    };\n/* test s'il est déjà connecter */ \n    if (isLoggedIn()) {\n        return <Redirect to={location.state || '/'} />;\n    }\n\n    if (redirectToLogin) {\n        return <Redirect to={{\n            pathname: '/login',\n            state: { from: from }\n        }}\n        />;\n    }\n\n    return (\n        \n    <div className=\"container\">\n        <div className=\"row\">\n            <p className=\"ident bordure\">\n                Mes informations\n            </p>\n        <div className=\"col-md-12 mt-12\">\n\n            <form onSubmit={handleSubmit} >\n\n            <div className=\"form-group esp \" >\n                <input \n                    name='nom'\n                    placeholder='Nom *'\n                    type='text'\n                    autoComplete='nom'\n                    value={nom}\n                    onChange={event => setNom(event.target.value)}\n                    \n                /> \n                 <input \n                    name='Prnom'\n                    placeholder='Prénom *'\n                    type='text'\n                    autoComplete='prenom'\n                    value={prenom}\n                    onChange={event => setPrenom(event.target.value)}\n                    style={{marginLeft: '15px'}}\n                />\n                </div>\n                <div className=\"form-group esp\">\n                <input \n                    name='nom_entreprise'\n                    placeholder='Entreprise *'\n                    type='text'\n                    autoComplete='nom_entreprise'\n                    value={nom_entreprise}\n                    onChange={event => setNomEntreprise(event.target.value)}\n                    \n                /> \n\t\t\t\t\n                 <select \n                    name='secteuractiviteId'\n                    autoComplete='secteuractiviteId'\n                    style={{marginLeft: '15px', width:'20%'}}\n                    onChange={event => setsecteuractiviteId(event.target.value)}\n                 >\n                     <option selected>Secteur Activité * </option>\n                    {secteuractivites.map(secteuractivite => { \n                     return ( \n                     <option  value={secteuractivite.id}>{secteuractivite.title}</option>\n                     );\n                    })}\n                    </select>\n                </div>\n                <div className=\"form-group esp\">\n                <input \n                    name='email'\n                    placeholder='Adress e-mail *'\n                    type='email'\n                    autoComplete='username'\n                    value={email}\n                    onChange={event => setEmail(event.target.value)}\n                />\n                <input \n                    name='emailConfirme'\n                    placeholder='Confirmer votre adress e-mail *'\n                    type='email'\n                    autoComplete='email2'\n                    value={emailConfirme}\n                    onChange={event => setEmailConfirme(event.target.value)}\n                    style={{marginLeft: '15px'}}\n                />\n                </div>\n              \n                <div className=\"form-group esp\">\n                    <input \n                        name='password'\n                        placeholder='Mot de passe *'\n                        type='password'\n                        autoComplete='password'\n                        value={password}\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                    <input \n                        name='passwordConfirme'\n                        placeholder='Confirmer votre mot de passe *'\n                        type='password'\n                        autoComplete='passwordConfirme'\n                        value={passwordConfirme}\n                        onChange={event => setPasswordConfirme(event.target.value)}\n                        style={{marginLeft: '15px'}}\n                    />\n                   \n                </div>\n                <div className=\"form-group esp \">\n                    <button type=\"submit\"  style={{width: '20%'}}  className=\"btn1 btn-primar btn-circle\">Verifier mon adress email</button>\n                    <input \n                        name='codeMaile'\n                        placeholder='Entrer le code reçu par mail'\n                        type='text'\n                        autoComplete='codeMaile'\n                        value={codeMaile}\n                        onChange={event => setCodeMaile(event.target.value)}\n                        style={{marginLeft: '15px'}}\n                    />\n                 </div>\n                 <div className=\"form-group esp \">                 \n                    <input \n                        name='newslettre'\n                        type='checkbox'\n                        autoComplete='newslettre'\n                        value={true}\n                        onChange={event => setNewslettre(event.target.value)}\n                        style={{marginLeft: '15px'}}\n                    />\n                    <label htmlFor=\"huey\">&nbsp;Je souhaite recevoir les Newslettre EasyAO</label>\n                    <br/>\n                      <input \n                        name='promotions'\n                        type='checkbox'\n                        autoComplete='promotions'\n                        value={true}\n                        onChange={event => setPromotions(event.target.value)}\n                        style={{marginLeft: '15px'}}\n                    />\n                    <label htmlFor=\"huey\">&nbsp;Je souhaite recevoir des promotions de EasyAO et ou de ses partenaires</label>\n                    <br/>\n                      <input \n                        name='jconditions'\n                        type='checkbox'\n                        autoComplete='jconditions'\n                        value={true}\n                        onChange={event => setJconditions(event.target.value)}\n                        style={{marginLeft: '15px'}}\n                    />\n                    <label htmlFor=\"huey\">&nbsp;J'accepte des conditions générales d'utilisation de EasyAO </label>\n                 </div>\n                 <div className=\"form-group esp \">\n                    <button type=\"submit\"  className=\"btn1 btn-primar btn-circle\">Je m'nscris</button>                 \n                 </div>             \n            </form>\n            <p>\n            Vous avez déjà un compte? <button onClick={() => toggleRedirect(true)}>Connectez-vous ici</button>\n            </p>\n            </div>\n        </div>\n        </div>\n    );\n};\n\nexport default Signup;","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Home.js",[],"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\hooks\\auth.js",[],"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\components\\Navbar.js",["57"],"C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Login.js",["58","59"],"import { useState } from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\nimport useAuth from '../hooks/auth';\nimport '../css/login.css';\n\nconst Login = () => {\n    const { login, isLoggedIn } = useAuth();\n    const history = useHistory();\n    const location = useLocation();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [redirectToSignup, toggleRedirect] = useState(false);\n    const { from } = location.state || { from: { pathname: '/' } };\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        login(email, password).then(res => {\n            history.replace(from);\n        });\n    };\n\n    if (isLoggedIn()) {\n        return <Redirect to={location.state || '/'} />;\n    }\n\n    if (redirectToSignup) {\n        return <Redirect to={{\n\n            pathname: '/signup',\n            state: { from: from }\n        }}\n        />;\n    }\n\n    return (\n        <div className=\"row\"> \n        <br/><br/><br/><br/><br/>\n        <p className=\"ident bordure\">\n            Identification\n            </p>\n        <div className=\"col-md-12 mt-12\">\n            \n            <form onSubmit={handleSubmit}>\n            <div className=\"form-group esp\">\n                <input \n                    name='email'\n                    placeholder='Identifiant'\n                    type='email'\n                    autoComplete='username'\n                    value={email}\n                    onChange={event => setEmail(event.target.value)}\n                />\n                </div>\n                <div className=\"form-group esp\">\n                    <input \n                        name='password'\n                        placeholder='Mot de passe'\n                        type='password'\n                        autoComplete='password'\n                        value={password}\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                    <a className=\"bordure left\" href=\"#\">Mot de passe oublié</a>\n                </div>\n                <div className=\"form-group esp\">          \n                    <a className=\"bordure\" onClick={() => toggleRedirect(true)}>Je n'ai pas de compte</a>\n                </div>\n                <div className=\"form-group \">\n                    <button type=\"submit\" className=\"btn1 btn-primar btn-circle\">Connexion</button>\n                 </div>\n            </form>\n            \n            </div>\n            </div>     \n    );\n};\n\nexport default Login;","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Felicitation.js",["60"],"import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Parametrecomptes = function () {\r\n    const [parametrecomptes, setParametrecomptes] = useState([]);\r\n    const [refresh, toggleRefresh] = useState(0);\r\n    const refreshParent = () => {\r\n        toggleRefresh(refresh + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchParametrecomptes();\r\n    }, [refresh]);\r\n\r\n    async function fetchParametrecomptes() {\r\n        const { data } = await axios.get('/api/parametrecomptes');\r\n        setParametrecomptes(data);\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Remarques</h2>\r\n            <ol>\r\n                {parametrecomptes.map(Parametrecompte => {\r\n                    return (\r\n                        <li key={Parametrecompte.id}>\r\n                            <strong>{Parametrecompte.typecompte}</strong> {Parametrecompte.typecompte} \r\n                            <sub>de: {Parametrecompte.sourcing}</sub>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ol>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Parametrecomptes;","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\Recherche.js",["61"],"\r\n/*import useAuth from '../hooks/auth';*/\r\nimport React from 'react';\r\nconst Recherche = () => {\r\n    /*const { isLoggedIn, logout, getProfile } = useAuth();*/\r\n    const handleSubmit = () => {\r\n        \r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <p className=\"felicitation\">\r\n                Recherche !\r\n                </p>        \r\n            </div>   \r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\n\r\nexport default Recherche;\r\n\r\n","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\NosOffres.js",["62","63","64","65","66","67","68","69","70","71"],"\r\nimport useAuth from '../hooks/auth';\r\nimport { useEffect, useState } from 'react';\r\nimport '../css/NosOffres.css';\r\nimport axios from 'axios';\r\nimport { BsFillCheckCircleFill } from \"react-icons/bs\";\r\nimport { Redirect, useLocation } from 'react-router-dom';\r\n\r\n  /** Private\r\n  * @NosOffres Fonction qui permet d'afficher les paramètres du contre par type client \r\n  * @param {table} parametrecomptes - table contient les paramètres liés avec différents types user\r\n  * @isLoggedIn Pour savoir si le client est déjà inscrit\r\n  * @author DEVAO - Khadija Lamsiah\r\n  **/\r\n\r\nconst NosOffres = () => {\r\n  const [parametrecomptes, setParametrecomptes] = useState([]);\r\n  const [refresh, toggleRefresh] = useState(0);\r\n  const refreshParent = () => {\r\n      toggleRefresh(refresh + 1);\r\n  };\r\n\r\n useEffect(() => {\r\n      fetchParametrecomptes();\r\n  }, [refresh]);\r\n\r\n  async function fetchParametrecomptes() {\r\n      const { data } = await axios.get('/api/parametrecomptes');\r\n      setParametrecomptes(data);\r\n      \r\n  }\r\n\r\nconst { isLoggedIn } = useAuth();\r\nconst [redirectToSignup, toggleRedirect] = useState(false);\r\nconst location = useLocation();\r\nconst { from } = location.state || { from: { pathname: '/' } };\r\n\r\nif (redirectToSignup) {\r\n  return <Redirect to={{\r\n\r\n      pathname: '/signup',\r\n      state: { from: from }\r\n  }}\r\n  />;\r\n}\r\n    return (\r\n      <div> \r\n        <form>     \r\n        <table className=\"table table-hover table-bordered\">\r\n          <thead>\r\n            <tr className=\"active\">\r\n                <th style={{background:\"#fff\"}}><center></center></th>\r\n                <th><center><h3>Version d'essai</h3><h4 className=\"text-muted text-sm class essai\">Gratuit</h4></center></th>\r\n                <th>\r\n               <center>\r\n                      <h3>Offre Découverte</h3><h4 className=\"text-muted text-sm\">Gratuit</h4>\r\n                      {isLoggedIn() ?\r\n                       <>  </>\r\n                      :\r\n                      <>\r\n                      <button type=\"submit\" className=\"btn1 btn-primar btn-circle\" onClick={() => toggleRedirect(true)}>\r\n                        Je m'inscris</button>\r\n                      </>\r\n                      } \r\n                    </center>\r\n                \r\n                </th>\r\n                <th>\r\n                  <center>\r\n                    <h3>Service Premium</h3><h4 className=\"text-muted text-sm\"><font style={{color: \"#F39200\"}}>59 &euro;</font>/mois</h4>\r\n                    <button type=\"submit\" className=\"btn1 btn-primar btn-circle\" onClick=\"#\"> Je m'abonne </button>\r\n                  </center>\r\n                </th>\r\n            </tr>      \r\n          </thead>\r\n\r\n          <tbody>\r\n          <tr>\r\n          <td>Sourcing</td>\r\n           {parametrecomptes.map(Parametrecompte => \r\n              \r\n              <td >\r\n              {Parametrecompte.typecompte == 'essai'? <div>{Parametrecompte.sourcing}</div>: \r\n              Parametrecompte.typecompte == 'decouverte'? <div>{Parametrecompte.sourcing}</div>: \r\n              Parametrecompte.typecompte == 'Premium'? <div>{Parametrecompte.sourcing}</div>: null\r\n              }\r\n\r\n            </td>\r\n            ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Periode de recherche</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n              <td>\r\n              {Parametrecompte.typecompte == 'essai'? <div>{Parametrecompte.periodrecherch} mois</div>: \r\n              Parametrecompte.typecompte == 'decouverte'? <div>{Parametrecompte.periodrecherch} mois</div>: \r\n              Parametrecompte.typecompte == 'Premium'? <div>{Parametrecompte.periodrecherch} mois</div>:null\r\n              }\r\n              </td>\r\n               ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Recherche dans l'objet du marché</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n              <td>\r\n                \r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.recherche_objet   ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.recherche_objet  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />: \r\n              Parametrecompte.typecompte === 'Premium' && Parametrecompte.recherche_objet ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n            \r\n              <td>Recherche dans les avis et les marché cloturés</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n              <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.recherche_avis_clotures  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' &&  Parametrecompte.recherche_avis_clotures  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n             Parametrecompte.typecompte === 'Premium' && Parametrecompte.recherche_avis_clotures ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Recherche dans les avis d'attribution</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n              <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.recherche_avis_attribution ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.recherche_avis_attribution  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.recherche_avis_attribution  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Affichage</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n              <td>\r\n              {Parametrecompte.typecompte == 'essai'? <div>{Parametrecompte.nbrmaxaoafficher} annonces/recherche</div>: \r\n              Parametrecompte.typecompte == 'decouverte'? <div>{Parametrecompte.nbrmaxaoafficher} annonces/recherche</div>: \r\n              Parametrecompte.typecompte == 'Premium'? <div>{Parametrecompte.nbrmaxaoafficher}annonces/recherche</div>:null\r\n              }\r\n              </td>\r\n              ) }\r\n            </tr>\r\n           \r\n            <tr>\r\n              <td>Dédoublonage</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.dedoublonage ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.dedoublonage  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.dedoublonage  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Sauvgarde des recherches</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.sauvegarde_recherche ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.sauvegarde_recherche  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.sauvegarde_recherche  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Données essentielles du marché</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.donnees_essentielle ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.donnees_essentielle  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.donnees_essentielle  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Contacts</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.contacts ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.contacts  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.contacts  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Département d'éxecution</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.departement_execution ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.departement_execution  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.departement_execution  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>avis complet et standardisation des annonces</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.avis_complet ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.avis_complet  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.avis_complet  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Telechargement et outil d'annalyse DCE</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.nbrdcegratuittelecharger ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.nbrdcegratuittelecharger  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.nbrdcegratuittelecharger  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Partage des annonces</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.partage_annonces ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.partage_annonces  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.partage_annonces  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Ajout dans l'agenda</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.ajout_agenda ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.ajout_agenda  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.ajout_agenda  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Gestion des favoris</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.gestion_favoris ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.gestion_favoris  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.gestion_favoris  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n            <tr>\r\n              <td>Grille de suivi des appel d'offre</td>\r\n              {parametrecomptes.map(Parametrecompte => \r\n             <td>\r\n              {Parametrecompte.typecompte === 'essai' && Parametrecompte.grille_ao ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'decouverte' && Parametrecompte.grille_ao  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:\r\n               Parametrecompte.typecompte === 'Premium' && Parametrecompte.grille_ao  ? <BsFillCheckCircleFill fontSize=\"24px\"  color=\"#F39200\" backgroundColor=\"#F39200\" />:<div> -</div>}\r\n              </td>\r\n              ) }\r\n            </tr>\r\n          </tbody>\r\n\r\n        </table>\r\n         </form>  \r\n        </div>  \r\n    );\r\n};\r\n\r\n\r\nexport default NosOffres;\r\n\r\n","C:\\Users\\khadija-lamsiah\\Desktop\\Nouveau dossier\\EasyAOTestConnexion\\client\\src\\pages\\MesFavoris.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":60,"nodeType":"78","messageId":"79","endLine":2,"endColumn":64},{"ruleId":"76","severity":1,"message":"80","line":67,"column":15,"nodeType":"78","messageId":"79","endLine":67,"endColumn":22},{"ruleId":"76","severity":1,"message":"81","line":12,"column":33,"nodeType":"78","messageId":"79","endLine":12,"endColumn":43},{"ruleId":"82","severity":1,"message":"83","line":63,"column":21,"nodeType":"84","endLine":63,"endColumn":58},{"ruleId":"82","severity":1,"message":"85","line":66,"column":21,"nodeType":"84","endLine":66,"endColumn":81},{"ruleId":"76","severity":1,"message":"86","line":7,"column":11,"nodeType":"78","messageId":"79","endLine":7,"endColumn":24},{"ruleId":"76","severity":1,"message":"87","line":6,"column":11,"nodeType":"78","messageId":"79","endLine":6,"endColumn":23},{"ruleId":"76","severity":1,"message":"86","line":19,"column":9,"nodeType":"78","messageId":"79","endLine":19,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":83,"column":43,"nodeType":"90","messageId":"91","endLine":83,"endColumn":45},{"ruleId":"88","severity":1,"message":"89","line":84,"column":42,"nodeType":"90","messageId":"91","endLine":84,"endColumn":44},{"ruleId":"88","severity":1,"message":"89","line":85,"column":42,"nodeType":"90","messageId":"91","endLine":85,"endColumn":44},{"ruleId":"88","severity":1,"message":"89","line":95,"column":43,"nodeType":"90","messageId":"91","endLine":95,"endColumn":45},{"ruleId":"88","severity":1,"message":"89","line":96,"column":42,"nodeType":"90","messageId":"91","endLine":96,"endColumn":44},{"ruleId":"88","severity":1,"message":"89","line":97,"column":42,"nodeType":"90","messageId":"91","endLine":97,"endColumn":44},{"ruleId":"88","severity":1,"message":"89","line":138,"column":43,"nodeType":"90","messageId":"91","endLine":138,"endColumn":45},{"ruleId":"88","severity":1,"message":"89","line":139,"column":42,"nodeType":"90","messageId":"91","endLine":139,"endColumn":44},{"ruleId":"88","severity":1,"message":"89","line":140,"column":42,"nodeType":"90","messageId":"91","endLine":140,"endColumn":44},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isValid' is assigned a value but never used.","'getProfile' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'refreshParent' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]